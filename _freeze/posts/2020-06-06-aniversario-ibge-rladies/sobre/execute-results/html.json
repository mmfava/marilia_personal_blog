{
  "hash": "7873a09bb97d46768e288f10e493bca9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Como fazer um mapa animado com dados do IBGE\"\nsubtitle: \"Post para o blog das R-Ladies BH\"\nimage: image.png\nauthor:\n  - name: \"Marília Melo Favalesso\"\n    email: \"marilia.melo.favalesso@gmail.com\"\ndate: \"2020-06-06\"\ncitation: \n  url: \"http://www.mmfava.com\"\n  version: 1\ncategories:\n  - Code\n  - R\n  - R-Ladies\n  - Spatial\nlang: pt-br\ntags: \n  - PT-BR\n---\n\n\n\n\n![Como fazer um mapa animado com dados do IBGE ❤](image.png)\n<button class=\"custom-button\" onclick=\"window.location.href='https://medium.com/rladiesbh/como-fazer-um-mapa-animado-com-dados-do-ibge-feffd73c8b6b'\">medium.com/rladiesbh</button>\n\n\nTrabalhando ou não com dados, com certeza você já deve ter ouvido falar sobre o nosso [_Instituto Brasileiro de Geografia e Estatística (IBGE)_](https://www.ibge.gov.br/institucional/o-ibge.html). O IBGE é uma entidade da administração pública federal, vinculada ao Ministério da Economia, responsável por prover todas as informações estatísticas oficiais do nosso país. Através do seu trabalho analítico, o IBGE nos fornece informações espaço-temporais importantes, como dados sociodemográficos, de ocupação e de uso da terra, sobre a indústria, o meio ambiente e a agricultura, além de cartas e mapas com delimitações do território brasileiro.\n\nCom o objetivo de homenagear a fundação dessa instituição, hoje comemora-se o **Dia da Criação do IBGE**. Foi em 06 de julho de 1934 que o _Decreto de Lei nº 24.609_ foi sancionado, iniciando o projeto que se tornou a instituição que conhecemos atualmente. Para que essa data tão importante não passe em branco, hoje eu vou te ensinar a fazer um mapa animado utilizando dados fornecidos pelo IBGE. No meu caso, eu selecionei a variável \"população estimada\" para os anos entre 2001 e 2019, mas existem outras opções no [ _Sistema IBGE de Recuperação Automática_ (SIDRA)](https://sidra.ibge.gov.br/Tabela/6579#resultado).\n\n![**População estimada para os municípios brasileiros entre 2001 e 2019 (fonte de dados: SIDRA - IBGE, 2020**).](https://github.com/mmfava/niver_IBGE/blob/master/pop_BR.gif?raw=true)\n\n<br />\n\nA SIDRA é uma ferramenta digital criada pelo IBGE com o intuito de permitir a consulta, de maneira simples e rápida, aos dados de estudos e pesquisas realizados pelo instituto. \nA SIDRA conta com uma [API que facilita o download dos dados de sua plataforma](https://cran.r-project.org/web/packages/sidrar/vignettes/Introduction_to_sidrar.html), porém, existe um limite de 50.000 informações por download, o que impossibilita a transferência direta dos dados de população estimada para o nosso projeto R. Consequentemente, é necessário realizar [o download diretamente da plataforma](https://sidra.ibge.gov.br/Tabela/6579#resultado). \n\nPara facilitar o acesso aos dados, deixei a [planilha de população estimada hospedada em meu repositório GitHub](https://github.com/mmfava/niver_IBGE/). Assim, vamos conseguir baixar e trabalhar com os dados diretamente em nosso projeto R. \n\nVocê pode rodar o script tanto localmente (seu computador) quanto pelo RStudio cloud, como o Rladies Belo Horizonte divulgou nesse [post](https://medium.com/rladiesbh/r-studio-cloud-como-programar-em-r-usando-a-web-aa6313a5fb8c).\n\nVamos usar alguns pacotes para fazer o mapa: *readr*, *sp*, *sf*, *brazilmaps*, *cartography*, *reshape2* e *animation*. Pode ser que para a instalação de alguns deles você também precise do pacote *remotes*. Todos em referência no fim do post.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~~ Abrir os dados no R ~~~ ## \n\n## Pacotes\nlibrary(readr) # O 'readr' é um pacote que facilita a obtenção de dados direto de arquivos .csv.\n\n## Vamos salvar o endereço para a planilha de dados em um objeto chamado \"myfile\". \nmyfile <- \"https://raw.githubusercontent.com/mmfava/niver_IBGE/master/tab.csv\"\n\n## Vamos abrir a planilha com o comando 'read_csv2' e armazenar o conteúdo no objeto 'tab'.\ntab <- read_csv2(myfile, # Endereço da planilha de dados.\n                col_names = TRUE) # Indicamos que a primeira linha da planilha é o nome das colunas.\n\n## Salvar a planilha 'tab' como um data frame no R. \ntab <- as.data.frame(tab)\n\n## Indicar que as colunas 3 até 19 são valores numéricos. \nis.numeric(tab[,3]) # São valores numéricos? NÃO!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntab[,3:19] <- sapply(tab[,3:19], as.numeric) # Transformar as colunas entre 3 e 19 em números. \nstr(tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5570 obs. of  19 variables:\n $ cod_ibge : num  1100015 1100023 1100031 1100049 1100056 ...\n $ municipio: chr  \"Alta Floresta D'Oeste (RO)\" \"Ariquemes (RO)\" \"Cabixi (RO)\" \"Cacoal (RO)\" ...\n $ 2001     : num  26919 76371 7501 73996 18012 ...\n $ 2002     : num  27237 78039 7490 74381 17925 ...\n $ 2003     : num  27563 79680 7478 74758 17794 ...\n $ 2004     : num  29001 86901 7421 76417 17217 ...\n $ 2005     : num  28629 85031 7436 75988 17366 ...\n $ 2006     : num  29005 86924 7421 76422 17215 ...\n $ 2008     : num  24577 84581 6777 78263 16784 ...\n $ 2009     : num  24354 85541 6695 78675 16622 ...\n $ 2011     : num  24228 91570 6221 78959 16939 ...\n $ 2012     : num  24069 92747 6132 79330 16852 ...\n $ 2013     : num  25728 101269 6495 85863 18041 ...\n $ 2014     : num  25652 102860 6424 86556 18013 ...\n $ 2015     : num  25578 104401 6355 87226 17986 ...\n $ 2016     : num  25506 105896 6289 87877 17959 ...\n $ 2017     : num  25437 107345 6224 88507 17934 ...\n $ 2018     : num  23167 106168 5438 84813 16444 ...\n $ 2019     : num  22945 107863 5312 85359 16323 ...\n```\n\n\n:::\n:::\n\n\n\n\n**A nossa planilha contém os seguintes dados**: \n\n* \"cod_ibge\": os códigos do IBGE para cada município brasileiro \n* \"município\": o nome de cada um dos 5.570 municípios brasileiros com a sigla dos respectivos estados entre parênteses\n* Entre a 3ª até a 19ª temos as estimativas populacionais para os anos entre 2001 e 2019.\n\n![**Estimativa populacional para os municípios brasileiros entre 2001 e 2019, segundo o IBGE (fonte: Sidra, 2020).**](https://github.com/mmfava/niver_IBGE/blob/master/tab.png?raw=true).\n<br />\n\nA próxima etapa do nosso projeto é a obtenção de *polígonos para os municípios* do Brasil. Para tal, vamos utilizar dados do tipo ‘*sf*’ ( _spatial data simplified_) do pacote ‘*brazilmaps*’. A parte legal desse pacote é que ele já fornece os limites dos municípios com os códigos do IBGE.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~~ Mapa do Brasil ~~~ ##\n\n## Pacotes\nlibrary(sp) # Vai auxiliar o brazilmaps na produção dos mapas.\nlibrary(sf) # Vai auxiliar o brazilmaps na produção dos mapas.\nlibrary(brazilmaps) # Polígono com os municípios do Brasil.\n\n## Usamos o comando 'get_map' do pacote 'brazilmaps' para \n## a obtenção dos polígonos municipais. \nbrasil <- brazilmaps::get_brmap(geo = \"City\", # Polígonos para municípios.\n                    class = \"sf\") # Classe espacial = 'sf'. \n\n# Visualização do mapa.\nplot(st_geometry(brasil)) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nold-style crs object detected; please recreate object with a recent sf::st_crs()\nold-style crs object detected; please recreate object with a recent sf::st_crs()\nold-style crs object detected; please recreate object with a recent sf::st_crs()\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sobre_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n<br />\n\nPara a construção dos mapas, é necessário associar os valores de população estimada com os polígonos que delimitam os municípios brasileiros. Para isso, vamos utilizar o comando \"*merge*\" com as colunas que correspondem aos códigos IBGE como chaves.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~~ Unir as tabelas ~~~ ##\n\n## Vamos unir as tabelas a partir dos códigos do IBGE para os municípios.\ntab_brasil <- merge(brasil, tab, # Planilhas que queremos unir.\n                    by.x = 'City', by.y = 'cod_ibge', # Nome das colunas com os códigos de pareamento (= código IBGE)\n                    all.x = TRUE) # Para manter todos os valores da planilha 'x' (= brasil).\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nold-style crs object detected; please recreate object with a recent sf::st_crs()\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(tab_brasil)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 24 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -63.61603 ymin: -13.693 xmax: -60.33317 ymax: -9.670769\nGeodetic CRS:  +proj=longlat +ellps=GRS80 +no_defs\n     City                  nome State MicroRegion MesoRegion Region\n1 1100015 ALTA FLORESTA D'OESTE    11       11006       1102      1\n2 1100023             ARIQUEMES    11       11003       1102      1\n3 1100031                CABIXI    11       11008       1102      1\n4 1100049                CACOAL    11       11006       1102      1\n5 1100056            CEREJEIRAS    11       11008       1102      1\n6 1100064     COLORADO DO OESTE    11       11008       1102      1\n                   municipio  2001  2002  2003  2004  2005  2006  2008  2009\n1 Alta Floresta D'Oeste (RO) 26919 27237 27563 29001 28629 29005 24577 24354\n2             Ariquemes (RO) 76371 78039 79680 86901 85031 86924 84581 85541\n3                Cabixi (RO)  7501  7490  7478  7421  7436  7421  6777  6695\n4                Cacoal (RO) 73996 74381 74758 76417 75988 76422 78263 78675\n5            Cerejeiras (RO) 18012 17925 17794 17217 17366 17215 16784 16622\n6     Colorado do Oeste (RO) 21421 20881 20412 18349 18883 18342 18216 17822\n   2011  2012   2013   2014   2015   2016   2017   2018   2019\n1 24228 24069  25728  25652  25578  25506  25437  23167  22945\n2 91570 92747 101269 102860 104401 105896 107345 106168 107863\n3  6221  6132   6495   6424   6355   6289   6224   5438   5312\n4 78959 79330  85863  86556  87226  87877  88507  84813  85359\n5 16939 16852  18041  18013  17986  17959  17934  16444  16323\n6 18338 18093  19190  19001  18817  18639  18467  16227  15882\n                        geometry\n1 MULTIPOLYGON (((-62.05044 -...\n2 MULTIPOLYGON (((-62.42262 -...\n3 MULTIPOLYGON (((-60.70931 -...\n4 MULTIPOLYGON (((-61.21172 -...\n5 MULTIPOLYGON (((-60.74296 -...\n6 MULTIPOLYGON (((-60.33317 -...\n```\n\n\n:::\n:::\n\n\n\n<br />\n\nOs mapas com as estimativas populacionais são criados com o uso do pacote [“cartography”](https://cran.r-project.org/web/packages/cartography/vignettes/cartography.html). \n\nPara facilitar o entendimento do uso do pacote, primeiro vamos criar um mapa com as estimativas populacionais para 2011, deixando a animação para o último passo do projeto. \n\nCada polígono do mapa denota um município do Brasil. Desse jeito, cada polígono precisa ser colorido com a respectiva informação de população. Sendo assim, vamos criar intervalos da variável tamanho populacional, nos passos abaixo. E, apesar de o mapa inicial ser de 2011 vamos definir os valores dos intervalos da variável tamanho populacional com base no histórico inteiro.\n\nA gente começa selecionando as colunas com as informações propriamente ditas (colunas dos anos) e deixando esse histórico das populações em um formato longo/empilhado:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~~ Mapa com estimativa populacional para 2011 ~~~ ##\n\n## Pacotes:\nlibrary(reshape2) ## Para mudar o formato de uma tabela.\nlibrary(cartography) ## Para a produção do mapa.\n\n## ~> 1. A primeira etapa é criar um vetor com intervalos de população estimada, considerando os dados para todos os municípios e anos da planilha 'tab_brasil'. \n\n## Mudamos o formato da tabela com a função \"melt\", de modo que cada linha descreve um município, de um estado e sua respectiva população\ndesc <- tab[, 3:19] %>% \n  melt() # Assim, temos anos em uma coluna e estimativa populacional em outra.\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo id variables; using all as measure variables\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  variable value\n1     2001 26919\n2     2001 76371\n3     2001  7501\n4     2001 73996\n5     2001 18012\n6     2001 21421\n```\n\n\n:::\n:::\n\n\n\nNote que a função *melt* do pacote deixa os dados em formato longo, assim como a função *pivot_wider* do pacote [tidyr](https://tidyr.tidyverse.org/).\n\nAgora, definimos os valores dos intervalos da variável tamanho populacional. Se a gente quiser fazer por percentis: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Utilizamos a função \"getBreaks\" para obter 10 intervalos de valores. \nbreaks_map <- getBreaks(desc$value, # Valores de estimativa populacional para todos municípios e anos.\n                        nclass = 10) # Número de intervalos de valores que queremos.\n# Vendo como ficou:\nbreaks_map\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]      781.0     3154.0     4534.0     6128.0     8214.0    11117.0\n [7]    14763.6    19874.0    28767.6    54402.4 12252023.0\n```\n\n\n:::\n:::\n\n\n\n\nDevido à grande variabilidade da variável tamanho populacional os intervalos foram definidos, possivelmente de um jeito pouco intuitivo. Por exemplo, todos os municípios com população entre 5.44024\\times 10^{4} e 1.2252023\\times 10^{7} habitantes seriam representados de modo semelhante (com a mesma cor) sendo que uma cidade com 12 milhões de habitantes é mais de 200 vezes maior que uma cidade com 55.000 habitantes.\n\nVou quebrar de outro jeito. Note que eu especifiquei valores segundo uma percepção subjetiva de quais seriam quebras interessantes e passei as quantidades como um vetor.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Utilizamos a função \"getBreaks\" para obter 10 intervalos de valores. \nbreaks_map <- c(min(desc$value, na.rm = TRUE),\n                2500, 5000, 10000, 50000, 100000, 1000000,\n                max(desc$value, na.rm = TRUE))\n\nbreaks_map\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]      781     2500     5000    10000    50000   100000  1000000 12252023\n```\n\n\n:::\n:::\n\n\n\n\nE vamos ao mapa!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~ > 2. O mapa. \n## 2.1 Fundo colorido para o mapa. \n## Plotamos as dimensões do Brasil: st_geometry(tab_brasil)\n## Não incluir bordas ou cores nesse mapa: col = NA; border = NA\n## Colorir em lavanda o nosso background: bg = \"lavender\"\n## Retirar títulos do mapa: main = NULL\nplot(st_geometry(tab_brasil), \n     col = NA, \n     border = NA, \n     bg = \"lavender\", \n     main = NULL)\n\n## Vamos plotar os valores de população para o ano de 2011 com a função \"choroLayer\" do pacote \"cartography\".  \n## O mapa:\nchoroLayer(x = tab_brasil, # Tabela com os municípios do Brasil e dados de população estimada (formato \"sf\"). \n           var = \"2011\", # Aqui especificamos qual variável queremos plotar no mapa.\n           breaks = breaks_map, # Aqui são os intervalos de valores para o mapa.\n           col = carto.pal(pal1 = \"harmo.pal\", n1 = 10), # Palheta de cores selecionada.  \n           border = NA, # Sem bordas no mapa. \n           legend.pos = NA, # Sem legendas no mapa. \n           legend.title.txt = NA, # Sem título de legenda no mapa. \n           add = TRUE) # Adicionar o mapa sob o fundo lavanda. \n\n## A legenda:\nlegendChoro(pos = \"bottomright\", # Legenda na parte inferior e direita do mapa. \n            title.txt = \"População \\nestimada\", # Título da legenda. \n            breaks = breaks_map, # Intervalo de valores para a legenda (= mapa). \n            col = carto.pal(pal1 = \"harmo.pal\", n1 = 10), # Cores legenda (= mapa).\n            nodata = TRUE, # Incluir um quadrado branco para 'NA'. \n            nodata.txt = \"Sem dados\") # Nome dado à legenda de valores faltantes. \n\n# 3. Informações do nosso mapa:\nlayoutLayer(title = \"Distribuição da população em 2011\", # Título do mapa.\n            author = \"M. M. Favalesso (2020)\", # Autor do mapa. \n            sources = \"IBGE, estimativa populacional (2020)\", # Fonte dos dados (= IBGE ❤)\n            scale = NULL, # Sem barras de escala. \n            south = TRUE) # Indicação do sul. \n```\n\n::: {.cell-output-display}\n![](sobre_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n<br />\n\nO último passo do nosso projeto é criar um mapa animado com as estimativas populacionais para os municípios do Brasil. Para tal, vamos usar o pacote “*animation*”. Esse pacote salva uma sequência de imagens dentro de um laço como um gif animado. Particularmente, é um dos meus pacotes R favoritos. \n\nSe você não estiver usando um projeto (.Rproj) é necessário que você defina um diretório de trabalho para salvar os mapas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ~~~ Criando a animação ~~~ ##\n\n## Working directory\n## a pasta do seu computador onde vamos salvar nosso gif.\n#setwd(\"pasta_onde_voce_quer_salvar\")\n\n## Pacote:\nlibrary(animation) ## Pacote para a criação das animações.\n\n## Vetor com o nome das colunas que queremos plotar em nosso laço de repetição, para que apareçam\n## em nossa animação em sequência. \nano <- colnames(tab_brasil)[8:24]\n\n## Usamos um laço de repetição para criar os mapas com as estimativas populacionais e inseri-los na nossa animação.   \nsaveGIF({\n  for(i in ano){ ## Vamos usar a função saveGIF do pacote \"animation\".\n    ## for(i in ano) = Para cada ano (i) no objeto \"ano\" ...\n    \n    ## Background colorido.  \n    plot(st_geometry(tab_brasil), col = NA, border = NA, bg = \"lavender\", main = NULL)\n    \n    ## Mapas de população estimada. \n    choroLayer(x = tab_brasil, \n               var = i, # A cada laço de repetição, um novo ano é plotado. \n               breaks = breaks_map, \n               col = carto.pal(pal1 = \"harmo.pal\", n1 = 10),  \n               border = NA, \n               legend.pos = NA, \n               legend.title.txt = NA, \n               add = TRUE) \n    \n    ## Legenda.\n    legendChoro(pos = \"bottomright\",\n                title.txt = \"População \\nestimada\",\n                breaks = breaks_map,\n                col = carto.pal(pal1 = \"harmo.pal\", n1 = 10), \n                nodata = TRUE, nodata.txt = \"Sem dados\")\n    \n    ## Informações do mapa.\n    layoutLayer(title = paste0(\"Distribuição da população em \", i), # Título do mapa para cada ano. \n                author = \"M. M. Favalesso (2020)\", \n                sources = \"IBGE, estimativa populacional (2020)\", \n                scale = NULL, \n                south = TRUE)\n  }\n}, movie.name = \"pop_BR.gif\") # Nome do gif. \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nOutput at: pop_BR.gif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n<br />\n\nCom a finalização do laço, o gif é aberto e você poderá verificar o resultado. O arquivo ficará salvo no seu _working directory_ com o nome **“pop_brasil.gif”**. \n\nEspero que você tenha gostado desse tutorial! \n\nDesejo ver suas gifs animadas em comemoração ao aniversário do nosso IBGE ♡\n\nUm abraço forte! \n\n✿\n\nM. \n\n### Revisão por @larissa.sayuri.fcs\n\n# Referências\n\n* Pacote [readr](https://CRAN.R-project.org/package=readr):\n\nHadley Wickham, Jim Hester e Romain Francois (2018). readr: Read Rectangular Text Data. R package version 1.3.1. https://CRAN.R-project.org/package=readr\n\nRoger S. Bivand, Edzer Pebesma, Virgilio Gomez-Rubio, 2013. Applied spatial data analysis with R, Second edition. Springer, NY. https://asdar-book.org/\n\n* Pacote [brazilmaps](http://github.com/rpradosiqueira/brazilmaps):\n\nRenato Prado Siqueira (2020). brazilmaps: Brazilian Maps from Different Geographic Levels. R package version 0.1.0. http://github.com/rpradosiqueira/brazilmaps\n\n* Pacote [sp](https://cran.r-project.org/web/packages/sp/index.html):\n\nPebesma, E.J., R.S. Bivand, 2005. Classes and methods for spatial data in R. R News 5 (2), https://cran.r-project.org/doc/Rnews/.\n\n* Pacote [sf](https://cran.r-project.org/web/packages/sf/index.html):\n\nPebesma, E., 2018. Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal 10 (1), 439-446, https://doi.org/10.32614/RJ-2018-009\n\n* Pacote [cartography](https://cran.r-project.org/web/packages/cartography/index.html):\n\nGiraud, T. e Lambert, N. (2016). cartography: Create and Integrate Maps in your R Workflow. JOSS, 1(4). doi: 10.21105/joss.00054.\n\nGiraud, T. e Lambert, N. (2017). “Reproducible Cartography.” In Peterson M. (ed.), _Advances in Cartography and GIScience. ICACI 2017. Lecture Notes in Geoinformation and Cart\n\nography._, pp. 173-183. doi: 10.1007/978-3-319-57336-6_13.\n\n* Pacote [reshape2](https://cran.r-project.org/web/packages/reshape2/index.html):\n\nHadley Wickham (2007). Reshaping Data with the reshape Package. Journal of Statistical Software, 21(12), 1-20. URL http://www.jstatsoft.org/v21/i12/.\n\n* Pacote [animation](https://cran.r-project.org/web/packages/animation/index.html):\n\nYihui Xie (2013). animation: An R Package for Creating Animations and Demonstrating Statistical Methods. Journal of Statistical Software, 53(1), 1-27. URL http://www.jstatsoft.org/v53/i01/.\n\nYihui Xie [aut, cre], Christian Mueller [ctb], Lijia Yu [ctb], Weicheng Zhu [ctb] (2018). animation: A Gallery of Animations in Statistics and Utilities to Create Animations. R package version 2.6.\n\n* Pacote [remotes](https://cran.r-project.org/web/packages/remotes/index.html):\n\nCsárdi G, Hester J, Wickham H, Chang W, Morgan M, Tenenbaum D (2024). remotes: R Package Installation from Remote Repositories, Including 'GitHub'. R package version 2.5.0, https://github.com/r-lib/remotes#readme, https://remotes.r-lib.org.\n\n\n\n\n",
    "supporting": [
      "sobre_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}